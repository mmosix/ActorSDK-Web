{"version":3,"sources":["../../../../src/components/dialog/compose/ComposeTextArea.react.js"],"names":[],"mappings":"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","file":"ComposeTextArea.react.js","sourcesContent":["/*\n * Copyright (C) 2015-2016 Actor LLC. <https://actor.im>\n */\n\nimport React, { Component, PropTypes } from 'react';\nimport Inputs from '../../../utils/Inputs';\nimport { KeyCodes } from '../../../constants/ActorAppConstants';\n\nclass ComposeTextArea extends Component {\n  static propTypes = {\n    value: PropTypes.string.isRequired,\n    autoFocus: PropTypes.bool.isRequired,\n    sendByEnter: PropTypes.bool.isRequired,\n    sendEnabled: PropTypes.bool.isRequired,\n    onSubmit: PropTypes.func.isRequired,\n    onTyping: PropTypes.func.isRequired,\n    onPaste: PropTypes.func,\n    onKeyDown: PropTypes.func\n  };\n\n  static defaultProps = {\n    sendEnabled: true\n  };\n\n  constructor(props) {\n    super(props);\n\n    this.onChange = this.onChange.bind(this);\n    this.onKeyDown = this.onKeyDown.bind(this);\n    this.onWindowFocus = this.onWindowFocus.bind(this);\n    this.onDocumentKeyDown = this.onDocumentKeyDown.bind(this);\n\n    this.blur = this.blur.bind(this);\n    this.focus = this.focus.bind(this);\n    this.autoFocus = this.autoFocus.bind(this);\n  }\n\n  componentDidMount() {\n    if (this.props.autoFocus) {\n      this.focus();\n    }\n\n    window.addEventListener('focus', this.onWindowFocus);\n    document.addEventListener('keydown', this.onDocumentKeyDown, false);\n  }\n\n  shouldComponentUpdate(nextProps) {\n    return nextProps.value !== this.props.value ||\n           nextProps.autoFocus !== this.props.autoFocus ||\n           nextProps.sendEnabled !== this.props.sendEnabled ||\n           nextProps.sendByEnter !== this.props.sendByEnter;\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('focus', this.onWindowFocus);\n    document.removeEventListener('keydown', this.onDocumentKeyDown, false);\n  }\n\n  onWindowFocus() {\n    this.autoFocus();\n  }\n\n  onDocumentKeyDown(event) {\n    if (event.target === this.refs.area) {\n      // event will be handled by onKeyDown\n      return;\n    }\n\n    if (!event.metaKey && !event.altKey && !event.ctrlKey && !event.shiftKey) {\n      this.autoFocus();\n      this.onKeyDown(event);\n    }\n  }\n\n  onChange(event) {\n    this.props.onTyping(event.target.value, this.getCaretPosition());\n  }\n\n  onKeyDown(event) {\n    if (this.props.sendEnabled && this.isSendEvent(event)) {\n      event.preventDefault();\n      this.props.onSubmit();\n    } else if (this.props.onKeyDown) {\n      this.props.onKeyDown(event);\n    }\n  }\n\n  isSendEvent(event) {\n    if (event.keyCode !== KeyCodes.ENTER) {\n      return false;\n    }\n\n    return this.props.sendByEnter ? !event.shiftKey : event.metaKey;\n  }\n\n  getCaretPosition() {\n    const { start } = Inputs.getInputSelection(this.refs.area);\n    return start;\n  }\n\n  render() {\n    const { value } = this.props;\n\n    return (\n      <textarea\n        ref=\"area\"\n        className=\"compose__message\"\n        value={value}\n        onChange={this.onChange}\n        onKeyDown={this.onKeyDown}\n        onPaste={this.props.onPaste}\n      />\n    );\n  }\n\n  focus() {\n    const { area } = this.refs;\n    if (area !== document.activeElement) {\n      area.focus();\n      if (area.createTextRange) {\n        const range = area.createTextRange();\n        range.move('character', area.value.length);\n        range.select();\n      } else if (area.selectionStart) {\n        area.setSelectionRange(area.value.length, area.value.length);\n      }\n    }\n  }\n\n  autoFocus() {\n    if (this.props.autoFocus) {\n      this.focus();\n    }\n  }\n\n  blur() {\n    this.refs.area.blur();\n  }\n}\n\nexport default ComposeTextArea;\n"]}